plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'java-library'
    id 'maven-publish'
}

group 'me.dessie'
version '1.2.1'

//Define the Minecraft and SpecialSource Versions.
String minecraftVersion = "1.18.1-R0.1-SNAPSHOT"
String specialSourceVersion = "1.11.0"

//Apply the java plugin across subprojects.
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
}

//Make sure the plugin.yml version is similar to the project version.
processResources.filesMatching('plugin.yml') {
    expand(ver: project.version)
}

project.gradle.projectsEvaluated {
    allprojects {
        java.toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }

        compileJava.options.encoding = 'UTF-8'

        task obfuscate {
            description 'Generates a JAR where Mojangs Mappings are first mapped to obfuscated, and then mapped to Spigots mappings. This jar can run on a Spigot server.'
            group = 'obfuscate'
            String localMinecraft = "/.m2/repository/org/spigotmc/minecraft-server/"
            String homeDir = project.gradle.gradleUserHomeDir.parent

            doLast {
                String toolingDir = project.configurations.compileClasspath.find {
                    it.name.startsWith("SpecialSource-${specialSourceVersion}-shaded")
                }

                //First remap to obfuscated
                exec {
                    commandLine 'java',
                            '-cp', "${toolingDir};${homeDir}/.m2/repository/org/spigotmc/spigot/${minecraftVersion}/spigot-${minecraftVersion}-remapped-mojang.jar", 'net.md_5.specialsource.SpecialSource',
                            '-l',
                            '-i', "${buildDir}/libs/${project.name}-${project.version}.jar",
                            '-o', "${buildDir}/libs/${project.name}-obf.jar",
                            '-m', "${homeDir}/${localMinecraft}/${minecraftVersion}/minecraft-server-${minecraftVersion}-maps-mojang.txt",
                            '-r', '-q'
                }

                //Then remap to Spigot
                exec {
                    commandLine 'java',
                            '-cp', "${toolingDir};${homeDir}/.m2/repository/org/spigotmc/spigot/${minecraftVersion}/spigot-${minecraftVersion}-remapped-obf.jar", 'net.md_5.specialsource.SpecialSource',
                            '-l',
                            '-i', "${buildDir}/libs/${project.name}-obf.jar",
                            '-o', "${buildDir}/libs/${project.name}-${project.version}.jar",
                            '-m', "${homeDir}/${localMinecraft}/${minecraftVersion}/minecraft-server-${minecraftVersion}-maps-spigot.csrg",
                            '-q'
                }
            }
        }

        build.finalizedBy obfuscate

        //Repositories that all modules use.
        repositories {
            mavenLocal()
            mavenCentral()
        }

        dependencies {
            //All modules depend on Spigot, duh.
            compileOnly "org.spigotmc:spigot:${minecraftVersion}:remapped-mojang"

            //Only used so Spigot Sources do not have annotation errors.
            compileOnly 'org.jetbrains:annotations:16.0.2'

            //SpecialSource dependency
            compileOnly "net.md-5:SpecialSource:${specialSourceVersion}:shaded"
        }
    }
}

//Add Core module as a dependency for all other modules, except itself.
configure(subprojects.findAll {it.name != 'core'}) {
    dependencies {
        api project(":core")
    }
}

task configurePublish {
    description 'Configures the project to compile the JavaDoc and Sources JARs.'
    group = 'publishing'

    doFirst {
        java {
            withJavadocJar()
            withSourcesJar()
        }
    }
}

//Make sure all projects can be published except a testing experimental one.
configure(allprojects.findAll {it.name != 'experimental'}) {

    //Generate the JavaDoc and Sources JARs before publishing.
    publish.dependsOn(configurePublish)

    publishing {
        repositories.maven {
            name = "GitHubPackages"
            url "https://maven.pkg.github.com/dessie0/dessielib"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }

        publications {
            gpr(MavenPublication) {
                groupId 'me.dessie.dessielib'
                artifactId project.name
                from components.java
            }
        }
    }
}

//Copy the JAR to the output directory
task copyJar(type: Copy) {
    String outputDir = rootProject.findProperty("outputDir")

    from "${buildDir}/libs/${project.name}-${project.version}.jar"
    into outputDir == null ? "${buildDir}/libs" : outputDir
}

build.finalizedBy copyJar

dependencies {
    subprojects.forEach {
        api it
    }
}

//Used to create the fat jar
build.dependsOn {
    shadowJar {
        archiveFileName = "${project.name}-${project.version}.jar"
        dependencies {
            exclude project(":experimental")
        }
    }
}

