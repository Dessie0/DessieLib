package me.dessie.dessielib.resourcepack.assets;

import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import me.dessie.dessielib.resourcepack.ResourcePack;
import me.dessie.dessielib.resourcepack.ResourcePackBuilder;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.charset.StandardCharsets;

public abstract class Asset {
    private final String name;
    private final File resourcePackFolder;
    private final File assetsFolder;
    private final File namespaceFolder;

    //Can be set if you want an Asset to be skipped, if it was generated by another asset.
    //For example, ItemAssets use this, since all Assets are generated at once.
    private boolean generated = false;

    //Can be set if you want an Asset to be skipped, if it was initialized by another asset.
    //For example, ItemAssets use this, since all Assets are generated at once.
    private boolean initialized = false;

    public Asset(String name) {
        this.name = name;
        this.resourcePackFolder = new File(ResourcePack.getPlugin().getDataFolder() + "/" + this.getNamespace());
        this.assetsFolder = new File(this.getResourcePackFolder(), "assets");
        this.namespaceFolder = new File(assetsFolder + "/" + this.getNamespace());
    }

    public File getNamespaceFolder() {return namespaceFolder;}
    public File getAssetsFolder() {return assetsFolder;}
    public File getResourcePackFolder() {return resourcePackFolder;}
    public String getName() { return name; }
    public boolean isGenerated() {return generated;}
    public boolean isInitialized() {return initialized;}
    public String getNamespace() { return ResourcePack.getPlugin().getName().toLowerCase(); }

    public void setGenerated(boolean generated) {
        this.generated = generated;
    }

    public void setInitialized(boolean initialized) {
        this.initialized = initialized;
    }

    /**
     * Generally used for initialing files
     * @param builder The ResourcePackBuilder that is initializing this asset
     */
    public abstract void init(ResourcePackBuilder builder) throws IOException;

    /**
     * Generate the file contents that this asset will use.
     * @param builder The ResourcePackBuilder that is generating this asset
     */
    public abstract void generate(ResourcePackBuilder builder) throws IOException;

    /**
     * Writes a JsonObject to a File.
     * @param object The Object to write.
     * @param file The file to write to.
     */
    public static void write(JsonObject object, File file) {
        write(object, file, true);
    }

    /**
     * Writes a JsonObject to a File.
     * @param object The Object to write.
     * @param file The file to write to.
     * @param disableEscaping Whether to disable HTML escaping or not.
     */
    public static void write(JsonObject object, File file, boolean disableEscaping) {
        try {
            Writer writer = new FileWriter(file, StandardCharsets.UTF_8);
            GsonBuilder builder = new GsonBuilder()
                    .setPrettyPrinting();

            if(disableEscaping) {
                builder.disableHtmlEscaping();
            }

            builder.create()
                    .toJson(object, writer);

            writer.flush();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
